#include <gtest/gtest.h>
#include <long_arithmetic.h>

TEST(Functions, Negate) {
    bignum::BigNumber number("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    std::string number_str = number.negate().to_string();
    ASSERT_EQ(number_str, "-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
}

TEST(Functions, Abs) {
    bignum::BigNumber number("-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    std::string number_str = number.abs().to_string();
    ASSERT_EQ(number_str, "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");

    number = bignum::BigNumber("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    number_str = number.abs().to_string();
    ASSERT_EQ(number_str, "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
}

TEST(Functions, Copy) {
    bignum::BigNumber number("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    std::string number_str = number.copy().to_string();
    ASSERT_EQ(number_str, "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
}