#include <gtest/gtest.h>
#include <long_arithmetic.h>

TEST(Operators, Equal) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890");
    ASSERT_EQ(number1, number2);
}

TEST(Operators, NotEqual) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890");
    ASSERT_NE(number1, number2);
}

TEST(Operators, Less) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890");
    ASSERT_LT(number1, number2);
}

TEST(Operators, LessOrEqual) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890");
    ASSERT_LE(number1, number2);
}

TEST(Operators, Greater) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.1234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    ASSERT_GT(number1, number2);
}

TEST(Operators, GreaterOrEqual) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    ASSERT_GE(number1, number2);
}