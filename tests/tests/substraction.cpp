#include <gtest/gtest.h>
#include <long_arithmetic.h>

TEST(Substraction, PositivePositive) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    std::string number_str = (number1 - number2).to_string();
    ASSERT_EQ(number_str, "0");
}

TEST(Substraction, NegativeNegative) {
    bignum::BigNumber number1("-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    std::string number_str = (number1 - number2).to_string();
    ASSERT_EQ(number_str, "0");
}

TEST(Substraction, PositiveNegative) {
    bignum::BigNumber number1("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    std::string number_str = (number1 - number2).to_string();
    ASSERT_EQ(number_str, "246913578024691357802469135780246913578024691357802469135780246913578024691357802469135780");
}

TEST(Substraction, NegativePositive) {
    bignum::BigNumber number1("-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    bignum::BigNumber number2("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    std::string number_str = (number1 - number2).to_string();
    ASSERT_EQ(number_str, "-246913578024691357802469135780246913578024691357802469135780246913578024691357802469135780");
}
